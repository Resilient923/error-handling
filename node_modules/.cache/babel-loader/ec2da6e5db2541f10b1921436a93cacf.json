{"ast":null,"code":"import axios, { AxiosError } from \"axios\";\nconst baseUrl = \"https://mock.codes\";\nexport const getApi1 = async () => {\n  return await axios.get(`${baseUrl}/400`);\n};\nexport const getApi2 = async () => {\n  /**\n   * Expected\n   * - 서버가 200을 반환했다면 : return { resp.data: MockCodeResponse }\n   * - 서버가 400을 반환했다면 : throw { throw new Error(status:400) }\n   * - 서버가 죽었다면 : throw { throw new Error(status:500) }\n   * 실제\n   * - 서버가 200을 반환했다면 : 정상\n   * - 서버가 400을 반환했다면 : AxiosError is thrown.\n   * - 서버가 죽었다면 : AxiosError is thrown.\n   */\n  console.log(\"getApi2 called\");\n  const resp = await axios.get(`${baseUrl}asdf/400`); // MockCodeResponse\n\n  if (resp.status !== 200) {\n    console.log(`getApi2 status error : ${resp.status}`);\n    throw new Error();\n  }\n\n  console.log(`success, returning ${resp.data}`);\n  return resp.data;\n};\n\nclass BadRequestError extends Error {\n  constructor(msg) {\n    super(msg); // Set the prototype explicitly.\n\n    Object.setPrototypeOf(this, BadRequestError.prototype);\n  }\n\n}\n\nexport const getApi3 = async () => {\n  // try-catch\n\n  /**\n   * Expected\n   * - 서버가 200을 반환했다면 : return { resp.data: MockCodeResponse }\n   * - 서버가 400을 반환했다면 : (서버가 의미있는 에러메세지를 줬을 것이므로) throw { new BadRequest(message:xx) }\n   * - 서버가 죽었다면 : throw { given AxiosError }\n   * 함의\n   * - 이 함수를 쓰는 너는, BadRequest 를 캐치해서 핸들링 해야 해. 나머지는 비정상이라고 보면 돼.\n   * 실제\n   * - 서버가 200을 반환했다면 : 정상\n   * - 서버가 400을 반환했다면 : 정상\n   * - 서버가 죽었다면 : 에러가 흡수됬어요.\n   * 평가\n   * -\n   */\n  console.log(\"getApi3 called\");\n\n  try {\n    const resp = await axios.get(`${baseUrl}asdf/400`);\n    console.log(\"got resp:\");\n    console.log(resp);\n    return resp.data;\n  } catch (e) {\n    var _e$response;\n\n    // ^ = axios에 의한 오류를 캐치하기 위한 try-catch에요.\n    // . = \"e를 보고, (1) e가 bad request를 뜻하면 BadRequestError를 쏘고, (2) 아니면 e를 쏘고\"\n    if (e instanceof AxiosError && ((_e$response = e.response) === null || _e$response === void 0 ? void 0 : _e$response.status) === 400) {\n      var _e$response2;\n\n      throw new BadRequestError((_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : _e$response2.data.description);\n    } else {\n      throw e;\n    }\n  }\n};\nexport const getApi4 = async () => {\n  // modify axios\n\n  /**\n   * Expected\n   * - 서버가 200을 반환했다면 : return { resp.data: MockCodeResponse }\n   * - 서버가 400을 반환했다면 : (서버가 의미있는 에러메세지를 줬을 것이므로) throw { new BadRequest(status:400, message:xx) }\n   * - 서버가 죽었다면 : throw { given AxiosError }\n   * 실제\n   * - 서버가 200을 반환했다면 :\n   * - 서버가 400을 반환했다면 :\n   * - 서버가 죽었다면 :\n   * 평가\n   * -\n   */\n  console.log(\"getApi2 called\");\n  const resp = await axios.get(`${baseUrl}asdf/400`); // MockCodeResponse\n\n  if (resp.status !== 200) {\n    console.log(`getApi2 status error : ${resp.status}`);\n    throw new Error();\n  }\n\n  console.log(`success, returning ${resp.data}`);\n  return resp.data;\n};\nexport const getApi5 = async () => {\n  /**\n   * Expected\n   * - 서버가 200을 반환했다면 : return { success: true, data: MockCodeResponse }\n   * - 서버가 400을 반환했다면 : return { success: false, message: ~ }\n   * - 서버가 죽었다면 : return { success: false, mesage: ~ }\n   * 실제\n   */\n  console.log(\"getApi2 called\");\n  const resp = await axios.get(`${baseUrl}asdf/400`); // MockCodeResponse\n\n  if (resp.status !== 200) {\n    console.log(`getApi2 status error : ${resp.status}`);\n    throw new Error();\n  }\n\n  console.log(`success, returning ${resp.data}`);\n  return resp.data;\n};","map":{"version":3,"names":["axios","AxiosError","baseUrl","getApi1","get","getApi2","console","log","resp","status","Error","data","BadRequestError","constructor","msg","Object","setPrototypeOf","prototype","getApi3","e","response","description","getApi4","getApi5"],"sources":["/Users/steadyshin/Documents/GitHub/axios-test/axios-test/src/api.ts"],"sourcesContent":["import axios, { AxiosError } from \"axios\";\n\nconst baseUrl = \"https://mock.codes\";\n\nexport const getApi1 = async () => {\n  return await axios.get(`${baseUrl}/400`);\n};\n\nexport const getApi2 = async () => {\n  /**\n   * Expected\n   * - 서버가 200을 반환했다면 : return { resp.data: MockCodeResponse }\n   * - 서버가 400을 반환했다면 : throw { throw new Error(status:400) }\n   * - 서버가 죽었다면 : throw { throw new Error(status:500) }\n   * 실제\n   * - 서버가 200을 반환했다면 : 정상\n   * - 서버가 400을 반환했다면 : AxiosError is thrown.\n   * - 서버가 죽었다면 : AxiosError is thrown.\n   */\n  console.log(\"getApi2 called\");\n  const resp = await axios.get(`${baseUrl}asdf/400`); // MockCodeResponse\n  if (resp.status !== 200) {\n    console.log(`getApi2 status error : ${resp.status}`);\n    throw new Error();\n  }\n  console.log(`success, returning ${resp.data}`);\n  return resp.data;\n};\n\nclass BadRequestError extends Error {\n  constructor(msg: string) {\n    super(msg);\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, BadRequestError.prototype);\n  }\n}\n\nexport const getApi3 = async () => {\n  // try-catch\n  /**\n   * Expected\n   * - 서버가 200을 반환했다면 : return { resp.data: MockCodeResponse }\n   * - 서버가 400을 반환했다면 : (서버가 의미있는 에러메세지를 줬을 것이므로) throw { new BadRequest(message:xx) }\n   * - 서버가 죽었다면 : throw { given AxiosError }\n   * 함의\n   * - 이 함수를 쓰는 너는, BadRequest 를 캐치해서 핸들링 해야 해. 나머지는 비정상이라고 보면 돼.\n   * 실제\n   * - 서버가 200을 반환했다면 : 정상\n   * - 서버가 400을 반환했다면 : 정상\n   * - 서버가 죽었다면 : 에러가 흡수됬어요.\n   * 평가\n   * -\n   */\n  console.log(\"getApi3 called\");\n  try {\n    const resp = await axios.get(`${baseUrl}asdf/400`);\n    console.log(\"got resp:\");\n    console.log(resp);\n    return resp.data;\n  } catch (e: any) {\n    // ^ = axios에 의한 오류를 캐치하기 위한 try-catch에요.\n\n    // . = \"e를 보고, (1) e가 bad request를 뜻하면 BadRequestError를 쏘고, (2) 아니면 e를 쏘고\"\n    if (e instanceof AxiosError && e.response?.status === 400) {\n      throw new BadRequestError(e.response?.data.description);\n    } else {\n      throw e;\n    }\n  }\n};\n\nexport const getApi4 = async () => {\n  // modify axios\n  /**\n   * Expected\n   * - 서버가 200을 반환했다면 : return { resp.data: MockCodeResponse }\n   * - 서버가 400을 반환했다면 : (서버가 의미있는 에러메세지를 줬을 것이므로) throw { new BadRequest(status:400, message:xx) }\n   * - 서버가 죽었다면 : throw { given AxiosError }\n   * 실제\n   * - 서버가 200을 반환했다면 :\n   * - 서버가 400을 반환했다면 :\n   * - 서버가 죽었다면 :\n   * 평가\n   * -\n   */\n  console.log(\"getApi2 called\");\n  const resp = await axios.get(`${baseUrl}asdf/400`); // MockCodeResponse\n  if (resp.status !== 200) {\n    console.log(`getApi2 status error : ${resp.status}`);\n    throw new Error();\n  }\n  console.log(`success, returning ${resp.data}`);\n  return resp.data;\n};\n\nexport const getApi5 = async () => {\n  /**\n   * Expected\n   * - 서버가 200을 반환했다면 : return { success: true, data: MockCodeResponse }\n   * - 서버가 400을 반환했다면 : return { success: false, message: ~ }\n   * - 서버가 죽었다면 : return { success: false, mesage: ~ }\n   * 실제\n   */\n  console.log(\"getApi2 called\");\n  const resp = await axios.get(`${baseUrl}asdf/400`); // MockCodeResponse\n  if (resp.status !== 200) {\n    console.log(`getApi2 status error : ${resp.status}`);\n    throw new Error();\n  }\n  console.log(`success, returning ${resp.data}`);\n  return resp.data;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}