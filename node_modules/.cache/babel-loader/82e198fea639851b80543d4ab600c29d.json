{"ast":null,"code":"import axios, { AxiosError } from \"axios\";\nconst baseUrl = \"https://mock.codes\";\nexport const getApi1 = async () => {\n  return await axios.get(`${baseUrl}/400`);\n};\nexport const getApi2 = async () => {\n  /**\n   * Expected\n   * - 서버가 200을 반환했다면 : return { resp.data: MockCodeResponse }\n   * - 서버가 400을 반환했다면 : throw { throw new Error(status:400) }\n   * - 서버가 죽었다면 : throw { throw new Error(status:500) }\n   * 실제\n   * - 서버가 200을 반환했다면 : 정상\n   * - 서버가 400을 반환했다면 : AxiosError is thrown.\n   * - 서버가 죽었다면 : AxiosError is thrown.\n   */\n  console.log(\"getApi2 called\");\n  const resp = await axios.get(`${baseUrl}asdf/400`); // MockCodeResponse\n\n  if (resp.status !== 200) {\n    console.log(`getApi2 status error : ${resp.status}`);\n    throw new Error();\n  }\n\n  console.log(`success, returning ${resp.data}`);\n  return resp.data;\n};\nexport const getApi3 = async () => {\n  // try-catch\n\n  /**\n   * Expected\n   * - 서버가 200을 반환했다면 : return { resp.data: MockCodeResponse }\n   * - 서버가 400을 반환했다면 : (서버가 의미있는 에러메세지를 줬을 것이므로) throw { new BadRequest(status:400, message:xx) }\n   * - 서버가 죽었다면 : throw { given AxiosError }\n   * 실제\n   * - 서버가 200을 반환했다면 :\n   * - 서버가 400을 반환했다면 :\n   * - 서버가 죽었다면 :\n   * 평가\n   * -\n   */\n  console.log(\"getApi3 called\");\n\n  try {\n    const resp = await axios.get(`${baseUrl}/400`);\n  } catch (e) {\n    if (e instanceof AxiosError) {\n      console.log(\"axios error\");\n      console.log(e);\n    }\n  }\n};\nexport const getApi4 = async () => {\n  // modify axios\n\n  /**\n   * Expected\n   * - 서버가 200을 반환했다면 : return { resp.data: MockCodeResponse }\n   * - 서버가 400을 반환했다면 : (서버가 의미있는 에러메세지를 줬을 것이므로) throw { new BadRequest(status:400, message:xx) }\n   * - 서버가 죽었다면 : throw { given AxiosError }\n   * 실제\n   * - 서버가 200을 반환했다면 :\n   * - 서버가 400을 반환했다면 :\n   * - 서버가 죽었다면 :\n   * 평가\n   * -\n   */\n  console.log(\"getApi2 called\");\n  const resp = await axios.get(`${baseUrl}asdf/400`); // MockCodeResponse\n\n  if (resp.status !== 200) {\n    console.log(`getApi2 status error : ${resp.status}`);\n    throw new Error();\n  }\n\n  console.log(`success, returning ${resp.data}`);\n  return resp.data;\n};\nexport const getApi5 = async () => {\n  /**\n   * Expected\n   * - 서버가 200을 반환했다면 : return { success: true, data: MockCodeResponse }\n   * - 서버가 400을 반환했다면 : return { success: false, message: ~ }\n   * - 서버가 죽었다면 : return { success: false, mesage: ~ }\n   * 실제\n   */\n  console.log(\"getApi2 called\");\n  const resp = await axios.get(`${baseUrl}asdf/400`); // MockCodeResponse\n\n  if (resp.status !== 200) {\n    console.log(`getApi2 status error : ${resp.status}`);\n    throw new Error();\n  }\n\n  console.log(`success, returning ${resp.data}`);\n  return resp.data;\n};","map":{"version":3,"names":["axios","AxiosError","baseUrl","getApi1","get","getApi2","console","log","resp","status","Error","data","getApi3","e","getApi4","getApi5"],"sources":["/Users/steadyshin/Documents/GitHub/axios-test/axios-test/src/api.ts"],"sourcesContent":["import axios, { AxiosError } from \"axios\";\n\nconst baseUrl = \"https://mock.codes\";\n\nexport const getApi1 = async () => {\n  return await axios.get(`${baseUrl}/400`);\n};\n\nexport const getApi2 = async () => {\n  /**\n   * Expected\n   * - 서버가 200을 반환했다면 : return { resp.data: MockCodeResponse }\n   * - 서버가 400을 반환했다면 : throw { throw new Error(status:400) }\n   * - 서버가 죽었다면 : throw { throw new Error(status:500) }\n   * 실제\n   * - 서버가 200을 반환했다면 : 정상\n   * - 서버가 400을 반환했다면 : AxiosError is thrown.\n   * - 서버가 죽었다면 : AxiosError is thrown.\n   */\n  console.log(\"getApi2 called\");\n  const resp = await axios.get(`${baseUrl}asdf/400`); // MockCodeResponse\n  if (resp.status !== 200) {\n    console.log(`getApi2 status error : ${resp.status}`);\n    throw new Error();\n  }\n  console.log(`success, returning ${resp.data}`);\n  return resp.data;\n};\n\nexport const getApi3 = async () => {\n  // try-catch\n  /**\n   * Expected\n   * - 서버가 200을 반환했다면 : return { resp.data: MockCodeResponse }\n   * - 서버가 400을 반환했다면 : (서버가 의미있는 에러메세지를 줬을 것이므로) throw { new BadRequest(status:400, message:xx) }\n   * - 서버가 죽었다면 : throw { given AxiosError }\n   * 실제\n   * - 서버가 200을 반환했다면 :\n   * - 서버가 400을 반환했다면 :\n   * - 서버가 죽었다면 :\n   * 평가\n   * -\n   */\n  console.log(\"getApi3 called\");\n  try {\n    const resp = await axios.get(`${baseUrl}/400`);\n  } catch (e: any) {\n    if (e instanceof AxiosError) {\n      console.log(\"axios error\");\n      console.log(e);\n    }\n  }\n};\n\nexport const getApi4 = async () => {\n  // modify axios\n  /**\n   * Expected\n   * - 서버가 200을 반환했다면 : return { resp.data: MockCodeResponse }\n   * - 서버가 400을 반환했다면 : (서버가 의미있는 에러메세지를 줬을 것이므로) throw { new BadRequest(status:400, message:xx) }\n   * - 서버가 죽었다면 : throw { given AxiosError }\n   * 실제\n   * - 서버가 200을 반환했다면 :\n   * - 서버가 400을 반환했다면 :\n   * - 서버가 죽었다면 :\n   * 평가\n   * -\n   */\n  console.log(\"getApi2 called\");\n  const resp = await axios.get(`${baseUrl}asdf/400`); // MockCodeResponse\n  if (resp.status !== 200) {\n    console.log(`getApi2 status error : ${resp.status}`);\n    throw new Error();\n  }\n  console.log(`success, returning ${resp.data}`);\n  return resp.data;\n};\n\nexport const getApi5 = async () => {\n  /**\n   * Expected\n   * - 서버가 200을 반환했다면 : return { success: true, data: MockCodeResponse }\n   * - 서버가 400을 반환했다면 : return { success: false, message: ~ }\n   * - 서버가 죽었다면 : return { success: false, mesage: ~ }\n   * 실제\n   */\n  console.log(\"getApi2 called\");\n  const resp = await axios.get(`${baseUrl}asdf/400`); // MockCodeResponse\n  if (resp.status !== 200) {\n    console.log(`getApi2 status error : ${resp.status}`);\n    throw new Error();\n  }\n  console.log(`success, returning ${resp.data}`);\n  return resp.data;\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,MAAMC,OAAO,GAAG,oBAAhB;AAEA,OAAO,MAAMC,OAAO,GAAG,YAAY;EACjC,OAAO,MAAMH,KAAK,CAACI,GAAN,CAAW,GAAEF,OAAQ,MAArB,CAAb;AACD,CAFM;AAIP,OAAO,MAAMG,OAAO,GAAG,YAAY;EACjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,OAAO,CAACC,GAAR,CAAY,gBAAZ;EACA,MAAMC,IAAI,GAAG,MAAMR,KAAK,CAACI,GAAN,CAAW,GAAEF,OAAQ,UAArB,CAAnB,CAZiC,CAYmB;;EACpD,IAAIM,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;IACvBH,OAAO,CAACC,GAAR,CAAa,0BAAyBC,IAAI,CAACC,MAAO,EAAlD;IACA,MAAM,IAAIC,KAAJ,EAAN;EACD;;EACDJ,OAAO,CAACC,GAAR,CAAa,sBAAqBC,IAAI,CAACG,IAAK,EAA5C;EACA,OAAOH,IAAI,CAACG,IAAZ;AACD,CAnBM;AAqBP,OAAO,MAAMC,OAAO,GAAG,YAAY;EACjC;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEN,OAAO,CAACC,GAAR,CAAY,gBAAZ;;EACA,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMR,KAAK,CAACI,GAAN,CAAW,GAAEF,OAAQ,MAArB,CAAnB;EACD,CAFD,CAEE,OAAOW,CAAP,EAAe;IACf,IAAIA,CAAC,YAAYZ,UAAjB,EAA6B;MAC3BK,OAAO,CAACC,GAAR,CAAY,aAAZ;MACAD,OAAO,CAACC,GAAR,CAAYM,CAAZ;IACD;EACF;AACF,CAvBM;AAyBP,OAAO,MAAMC,OAAO,GAAG,YAAY;EACjC;;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACER,OAAO,CAACC,GAAR,CAAY,gBAAZ;EACA,MAAMC,IAAI,GAAG,MAAMR,KAAK,CAACI,GAAN,CAAW,GAAEF,OAAQ,UAArB,CAAnB,CAfiC,CAemB;;EACpD,IAAIM,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;IACvBH,OAAO,CAACC,GAAR,CAAa,0BAAyBC,IAAI,CAACC,MAAO,EAAlD;IACA,MAAM,IAAIC,KAAJ,EAAN;EACD;;EACDJ,OAAO,CAACC,GAAR,CAAa,sBAAqBC,IAAI,CAACG,IAAK,EAA5C;EACA,OAAOH,IAAI,CAACG,IAAZ;AACD,CAtBM;AAwBP,OAAO,MAAMI,OAAO,GAAG,YAAY;EACjC;AACF;AACA;AACA;AACA;AACA;AACA;EACET,OAAO,CAACC,GAAR,CAAY,gBAAZ;EACA,MAAMC,IAAI,GAAG,MAAMR,KAAK,CAACI,GAAN,CAAW,GAAEF,OAAQ,UAArB,CAAnB,CATiC,CASmB;;EACpD,IAAIM,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;IACvBH,OAAO,CAACC,GAAR,CAAa,0BAAyBC,IAAI,CAACC,MAAO,EAAlD;IACA,MAAM,IAAIC,KAAJ,EAAN;EACD;;EACDJ,OAAO,CAACC,GAAR,CAAa,sBAAqBC,IAAI,CAACG,IAAK,EAA5C;EACA,OAAOH,IAAI,CAACG,IAAZ;AACD,CAhBM"},"metadata":{},"sourceType":"module"}